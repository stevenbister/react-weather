{"version":3,"sources":["components/Form.js","utils/API.js","config.js","components/City.js","components/Weather.js","components/Temp.js","components/DateComponent.js","components/Wind.js","components/Sun.js","components/WeatherContainer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","value","handleChange","bind","e","this","setState","target","className","onSubmit","htmlFor","id","type","name","placeholder","onChange","React","Component","axios","create","baseURL","OPENWEATHERAPIKEY","City","cityName","size","width","height","Weather","icon","imgPath","process","src","alt","style","weather","Temp","temp","DateComponent","getCurrentDate","Date","now","toLocaleDateString","undefined","day","month","hour","minute","marginBottom","margin","marginTop","Wind","windSpeed","Sun","formatTimeString","time","d","hours","getHours","minutes","getMinutes","substr","desc","sun","WeatherContainer","apiCall","a","CITY","searchTerm","API","get","then","response","data","isLoaded","error","items","city","description","weatherIcon","main","sunrise","sys","sunset","wind","speed","prevProps","Math","round","message","App","search","preventDefault","elements","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f6c1a1d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/grid.scss'\r\nimport '../styles/form.scss'\r\n\r\nexport class Form extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      value: ''\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange (e) {\r\n    this.setState({ value: e.target.value }) // Set property to value of input\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      // onChange function is written in parent and set a prop here\r\n      <div className='grid-row'>\r\n        <form className='grid-cell form-search' onSubmit={this.props.onSubmit}>\r\n          <label htmlFor='search'>Search for your city</label>\r\n          <div className=\"form-group\">\r\n            <input id='search' type='text' name='search' placeholder='Search for your city...' onChange={this.handleChange} value={this.state.value} />\r\n            <input type='submit' value='Search' />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line react/no-typos\r\nForm.propTypes = {\r\n  search: PropTypes.string\r\n}\r\n","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n  baseURL: `https://api.openweathermap.org/data/2.5/weather`\r\n})","const OPENWEATHERAPIKEY = 'dd6866086c793ca95487b4ee51f83cf5'\r\n\r\nexport default OPENWEATHERAPIKEY\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/city.scss'\r\n\r\nexport class City extends React.Component {\r\n  render () {\r\n    return <h1 className='city'>{this.props.cityName}</h1>\r\n  }\r\n}\r\n\r\nCity.propTypes = {\r\n  cityName: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/weather.scss'\r\nimport '../styles/detail.scss'\r\n\r\nconst size = {\r\n  width: 75,\r\n  height: 'auto'\r\n}\r\n\r\nexport class Weather extends React.Component {\r\n  render () {\r\n    const icon = this.props.icon\r\n    // As we need to dynamically reference icon we place it into the public folder\r\n    //  https://create-react-app.dev/docs/using-the-public-folder\r\n    const imgPath = `${process.env.PUBLIC_URL}/img/${icon}.svg`\r\n    return (\r\n      <div className='grid-cell spans-12 weather-block'>\r\n        <img src={imgPath} alt='' style={size} />\r\n        <p className='detail'>{this.props.weather}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nWeather.propTypes = {\r\n  weather: PropTypes.string.isRequired,\r\n  icon: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/temp.scss'\r\n\r\nexport class Temp extends React.Component {\r\n  render () {\r\n    return <p className='temp'>{this.props.temp}&deg;C</p>\r\n  }\r\n}\r\n\r\nTemp.propTypes = {\r\n  temp: PropTypes.number.isRequired\r\n}","import React from 'react'\r\n\r\nexport class DateComponent extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.getCurrentDate = this.getCurrentDate.bind(this)\r\n  }\r\n\r\n  getCurrentDate () {\r\n    const d = new Date(Date.now())\r\n    const options = {\r\n      day: 'numeric',\r\n      month: 'long',\r\n      hour: 'numeric',\r\n      minute: '2-digit'\r\n    }\r\n\r\n  return d.toLocaleDateString(undefined, options)\r\n  }\r\n\r\n  render () {\r\n    return <p className='detail'>{this.getCurrentDate()}</p>\r\n  }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/detail.scss'\r\n\r\nconst size = {\r\n  width: 25,\r\n  height: 'auto',\r\n  marginBottom: '.5rem'\r\n}\r\n\r\nconst margin = {\r\n  marginTop: 0,\r\n  marginBottom: '.5rem'\r\n}\r\n\r\nexport class Wind extends React.Component {\r\n  render () {\r\n    const icon = 'wind'\r\n    const imgPath = `${process.env.PUBLIC_URL}/img/${icon}.svg`\r\n    return (\r\n      <div>\r\n        <img src={imgPath} alt='' style={size} />\r\n        <p className='detail' style={margin}>Wind Speed</p>\r\n        <p style={margin}>{this.props.windSpeed} m/s</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nWind.propTypes = {\r\n  windSpeed: PropTypes.number.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/detail.scss'\r\n\r\nconst size = {\r\n  width: 25,\r\n  height: 'auto',\r\n  marginBottom: '.5rem'\r\n}\r\n\r\nconst margin = {\r\n  marginTop: 0,\r\n  marginBottom: '.5rem'\r\n}\r\n\r\nexport class Sun extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.formatTimeString = this.formatTimeString.bind(this)\r\n  }\r\n\r\n  formatTimeString (time) {\r\n    const d = new Date(time * 1000) // Time should be props supplied as unix timestamp so we need to multiply it by 1000 before we can use it\r\n    const hours = d.getHours()\r\n    const minutes = `0${d.getMinutes()}` // Let's prepend a 0 to display 2 digit minutes\r\n\r\n    return `${hours}:${minutes.substr(-2)}` // Add substr(-2) to remove leading 0 from anything over 10\r\n  }\r\n\r\n  render () {\r\n    const icon = this.props.desc === 'Sunrise' ? 'sunrise' : 'sunset'\r\n    const imgPath = `${process.env.PUBLIC_URL}/img/${icon}.svg`\r\n    return (\r\n      <div>\r\n        <img src={imgPath} alt='' style={size} />\r\n        <p className='detail' style={margin}>{this.props.desc}</p>\r\n        <p style={margin}>{this.formatTimeString(this.props.sun)}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSun.propTypes = {\r\n  sun: PropTypes.number.isRequired,\r\n  desc: PropTypes.string\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport API from '../utils/API'\r\nimport OPENWEATHERAPIKEY from '../config'\r\nimport { City } from './City'\r\nimport { Weather } from './Weather'\r\nimport { Temp } from './Temp'\r\nimport { Date, DateComponent } from './DateComponent'\r\nimport { Wind } from './Wind'\r\nimport { Sun } from './Sun'\r\n\r\nexport class WeatherContainer extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: [],\r\n      city: undefined,\r\n      weather: undefined,\r\n      weatherIcon: undefined,\r\n      temp: undefined,\r\n    }\r\n  }\r\n\r\n  apiCall = async () => {\r\n    const CITY = this.props.searchTerm\r\n    // const CITY = 'Birmingham'\r\n    const COUNTRY = 'uk'\r\n    const UNITS = 'metric'\r\n    await API.get(`?q=${CITY},${COUNTRY}&units=${UNITS}&APPID=${OPENWEATHERAPIKEY}`)\r\n      .then(response => response.data)\r\n      .then(\r\n        data => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error: null,\r\n            items: data,\r\n            city: data.name,\r\n            weather: data.weather[0].description,\r\n            weatherIcon: data.weather[0].icon,\r\n            temp: data.main.temp,\r\n            sunrise: data.sys.sunrise,\r\n            sunset: data.sys.sunset,\r\n            windSpeed: data.wind.speed\r\n          })\r\n        },\r\n        error => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          })\r\n        }\r\n      )\r\n  }\r\n\r\n  // Call api once component is mounted\r\n  componentDidMount () {\r\n    this.apiCall()\r\n  }\r\n\r\n  // Make api call again if new state doesn't match previous state \r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.searchTerm !== prevProps.searchTerm) {\r\n      this.apiCall()\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { error, isLoaded, city, weather, weatherIcon, sunset, sunrise, windSpeed } = this.state\r\n    const temp = Math.round(this.state.temp) // Let's round the temperature to a whole number\r\n    \r\n    if (error) {\r\n      return <div>Error: {error.response.data.message}</div>\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>\r\n    } else {\r\n      return (\r\n        <div className='grid-row center'>\r\n          <div className='grid-cell spans-12'>\r\n            <City cityName={city} />\r\n            <DateComponent />\r\n          </div>\r\n          <Weather weather={weather} icon={weatherIcon} />\r\n          <div className='grid-cell spans-12'>\r\n            <Temp temp={temp} />\r\n          </div>\r\n          {/* TODO: add sunrise, wind and max-temp */}\r\n          <div className='grid-cell spans-4'>\r\n            <Sun sun={sunrise} desc={'Sunrise'} />\r\n          </div>\r\n          <div className='grid-cell spans-4'>\r\n            <Sun sun={sunset} desc={'Sunset'} />\r\n          </div>\r\n          <div className='grid-cell spans-4'>\r\n            <Wind windSpeed={windSpeed}/>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line react/no-typos\r\nWeatherContainer.propTypes = {\r\n  searchTerm: PropTypes.string.isRequired\r\n}","import React from 'react'\r\nimport { Form } from './components/Form'\r\nimport { WeatherContainer } from './components/WeatherContainer'\r\nimport './styles/grid.scss'\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      search: 'Birmingham'\r\n    }\r\n\r\n    this.search = this.search.bind(this) // Bind search function\r\n  }\r\n\r\n  // Set search state to form's name='search' input\r\n  search = (e) => {\r\n    e.preventDefault() // Need to call this here to prevent the page reloading\r\n    this.setState({ search: e.target.elements.search.value })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='grid-container'>\r\n        <Form onSubmit={this.search} />\r\n        <WeatherContainer searchTerm={this.state.search} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './styles/index.scss'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}