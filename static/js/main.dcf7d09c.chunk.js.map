{"version":3,"sources":["utils/API.js","config.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","OPENWEATHERAPIKEY","Form","React","Component","props","state","value","handleChange","bind","e","this","setState","target","onSubmit","type","name","onChange","App","apiCall","a","CITY","search","API","get","then","response","data","isLoaded","items","city","weather","description","temp","main","error","preventDefault","elements","undefined","prevState","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAQ,oDCDKC,EAFW,mCCGbC,GCDgBC,IAAMC,UDCnC,YACE,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACXC,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPF,EADtB,0EAWgBC,GACZC,KAAKC,SAAS,CAAEL,MAAOG,EAAEG,OAAON,UAZpC,+BAgBI,OAEE,6BACE,0BAAMO,SAAUH,KAAKN,MAAMS,UACzB,8CAEE,2BAAOC,KAAK,OAAOC,KAAK,SAASC,SAAUN,KAAKH,aAAcD,MAAOI,KAAKL,MAAMC,SAElF,2BAAOQ,KAAK,SAASR,MAAM,iBAxBrC,GAA0BJ,IAAMC,YE4FjBc,E,YAtFb,WAAab,GAAQ,IAAD,8BAClB,4CAAMA,KAeRc,QAhBoB,sBAgBV,4BAAAC,EAAA,6DACFC,EAAO,EAAKf,MAAMgB,OACR,KACF,SAHN,SAIFC,EAAIC,IAAJ,aAAcH,EAAd,YAFU,KAEV,kBADQ,SACR,kBAAsDpB,IACzDwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAC1BF,MACC,SAAAE,GACE,EAAKf,SAAS,CACZgB,UAAU,EACVC,MAAOF,EACPG,KAAMH,EAAKX,KACXe,QAASJ,EAAKI,QAAQ,GAAGC,YACzBC,KAAMN,EAAKO,KAAKD,UAMpB,SAAAE,GACE,EAAKvB,SAAS,CACZgB,UAAU,EACVO,aAtBA,2CAhBU,EA6CpBb,OAAS,SAACZ,GACRA,EAAE0B,iBACF,EAAKxB,SAAS,CAAEU,OAAQZ,EAAEG,OAAOwB,SAASf,OAAOf,SA5CjD,EAAKD,MAAQ,CACX6B,MAAO,KACPP,UAAU,EACVC,MAAO,GACPC,UAAMQ,EACNP,aAASO,EACTL,UAAMK,EACNhB,OAAQ,cAGV,EAAKA,OAAS,EAAKA,OAAOb,KAAZ,gBAbI,E,gFAmDD8B,GACb5B,KAAKL,MAAMgB,SAAWiB,EAAUjB,QAClCX,KAAKQ,Y,0CAMPR,KAAKQ,Y,+BAGI,IAAD,EACyCR,KAAKL,MAA9C6B,EADA,EACAA,MAAOP,EADP,EACOA,SAAUE,EADjB,EACiBA,KAAMC,EADvB,EACuBA,QAASE,EADhC,EACgCA,KAStC,OACE,6BACE,kBAAC,EAAD,CAAMnB,SAAUH,KAAKW,SAClBM,EAA0B,KAAf,aACd,4BAAKE,GACL,4BAAKC,GACL,4BAAKE,EAAL,SACEE,EAAQA,EAAMK,QAAU,U,GAhFlBrC,IAAMC,WCIJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.dcf7d09c.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n  baseURL: `https://api.openweathermap.org/data/2.5/weather`\n})","const OPENWEATHERAPIKEY = 'dd6866086c793ca95487b4ee51f83cf5'\r\n\r\nexport default OPENWEATHERAPIKEY\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Form extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      value: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (e) {\n    this.setState({ value: e.target.value }) // Set property to value of input\n  }\n\n  render () {\n    return (\n      // onChange function is written in parent and set a prop here\n      <div>\n        <form onSubmit={this.props.onSubmit}>\n          <label>\n            Search city:\n            <input type='text' name='search' onChange={this.handleChange} value={this.state.value} />\n          </label>\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n    )\n  }\n}\n\n// eslint-disable-next-line react/no-typos\nForm.propTypes = {\n  search: PropTypes.string\n}\n","import React from 'react'\n\nexport class Weather extends React.Component {\n  // constructor (props) {\n  //   super(props)\n  // }\n\n  render () {\n    return <p>Weather</p>\n  }\n}\n","import React from 'react'\n\nimport API from './utils/API'\n\nimport OPENWEATHERAPIKEY from './config'\n\nimport { Weather } from './components/Weather'\nimport { Form } from './components/Form'\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      city: undefined,\n      weather: undefined,\n      temp: undefined,\n      search: 'Birmingham'\n    }\n\n    this.search = this.search.bind(this) // Bind search function\n  }\n\n  apiCall = async () => {\n    const CITY = this.state.search\n    const COUNTRY = 'uk'\n    const UNITS = 'metric'\n    await API.get(`?q=${CITY},${COUNTRY}&units=${UNITS}&APPID=${OPENWEATHERAPIKEY}`)\n      .then(response => response.data)\n      .then(\n        data => {\n          this.setState({\n            isLoaded: true,\n            items: data,\n            city: data.name,\n            weather: data.weather[0].description,\n            temp: data.main.temp\n          })\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          })\n        }\n      )\n  }\n\n  // Set search state to form's name='search' input\n  search = (e) => {\n    e.preventDefault() // Need to call this here to prevent the page reloading\n    this.setState({ search: e.target.elements.search.value })\n  }\n\n  // Make api call again if new state doesn't match previous state \n  componentDidUpdate(prevState) {\n    if (this.state.search !== prevState.search) {\n      this.apiCall()\n    }\n  }\n\n  // Call api once component is mounted\n  componentDidMount () {\n    this.apiCall()\n  }\n\n  render () {\n    const { error, isLoaded, city, weather, temp } = this.state\n\n    // if (error) {\n    //   return <div>Error: {error.message}</div>\n    // } else if (!isLoaded) {\n    //   return <div>Loading...</div>\n    // } else {\n      // TODO: Seperate these into components\n      // TODO: Sort error messages\n      return (\n        <div>\n          <Form onSubmit={this.search} />\n          { !isLoaded ? 'Loading...' : null }\n          <h1>{city}</h1>\n          <h2>{weather}</h2>\n          <h2>{temp}&deg;C</h2>\n          { error ? error.message : null } \n        </div>\n      )\n    // }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}