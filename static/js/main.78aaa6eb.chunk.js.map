{"version":3,"sources":["components/Form.js","utils/API.js","config.js","components/City.js","components/Weather.js","components/Temp.js","components/DateComponent.js","components/Wind.js","components/Sun.js","components/WeatherContainer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","value","handleChange","bind","e","this","setState","target","className","id","onSubmit","htmlFor","type","name","placeholder","onChange","form","src","process","React","Component","axios","create","baseURL","OPENWEATHERAPIKEY","City","cityName","size","width","height","Weather","icon","imgPath","alt","style","weather","Temp","temp","DateComponent","getCurrentDate","Date","now","toLocaleDateString","undefined","day","month","hour","minute","marginBottom","margin","marginTop","Wind","windSpeed","Sun","formatTimeString","time","d","hours","getHours","minutes","getMinutes","substr","desc","sun","WeatherContainer","apiCall","call","a","CITY","searchTerm","COORDS","APIgetString","API","get","then","response","data","isLoaded","error","items","city","description","weatherIcon","main","sunrise","sys","sunset","wind","speed","message","getLocation","navigator","geolocation","getCurrentPosition","pos","coord","coords","lat","latitude","lng","longitude","err","console","warn","code","maximumAge","timeout","prevProps","Math","round","App","search","preventDefault","elements","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78aaa6eb.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/grid.scss'\nimport '../styles/form.scss'\n\nexport class Form extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      value: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (e) {\n    this.setState({ value: e.target.value }) // Set property to value of input\n  }\n\n  render () {\n    return (\n      // onChange function is written in parent and set a prop here\n      <div className='grid-row'>\n        <form id='searchForm' className='grid-cell form-search' onSubmit={this.props.onSubmit}>\n          <label htmlFor='search'>Search for your city</label>\n          <div className='form-group'>\n            <input id='search' type='text' name='search' placeholder='Search for your city...' onChange={this.handleChange} value={this.state.value} />\n            {/* <input type='submit' value='Search' /> */}\n            <button form='searchForm' className='submit'>\n              <img src={`${process.env.PUBLIC_URL}/img/search.svg`} />\n              <span className='sr-only'>Search</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\n// eslint-disable-next-line react/no-typos\nForm.propTypes = {\n  search: PropTypes.string\n}\n","import axios from 'axios'\n\nexport default axios.create({\n  baseURL: `https://api.openweathermap.org/data/2.5/weather`\n})","const OPENWEATHERAPIKEY = 'dd6866086c793ca95487b4ee51f83cf5'\n\nexport default OPENWEATHERAPIKEY\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/city.scss'\n\nexport class City extends React.Component {\n  render () {\n    return <h1 className='city'>{this.props.cityName}</h1>\n  }\n}\n\nCity.propTypes = {\n  cityName: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/weather.scss'\nimport '../styles/detail.scss'\n\nconst size = {\n  width: 75,\n  height: 'auto'\n}\n\nexport class Weather extends React.Component {\n  render () {\n    const icon = this.props.icon\n    // As we need to dynamically reference icon we place it into the public folder\n    //  https://create-react-app.dev/docs/using-the-public-folder\n    const imgPath = `${process.env.PUBLIC_URL}/img/${icon}.svg`\n    return (\n      <div className='grid-cell spans-12 weather-block'>\n        <img src={imgPath} alt='' style={size} />\n        <p className='detail'>{this.props.weather}</p>\n      </div>\n    )\n  }\n}\n\nWeather.propTypes = {\n  weather: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/temp.scss'\n\nexport class Temp extends React.Component {\n  render () {\n    return <p className='temp'>{this.props.temp}&deg;C</p>\n  }\n}\n\nTemp.propTypes = {\n  temp: PropTypes.number.isRequired\n}","import React from 'react'\n\nexport class DateComponent extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.getCurrentDate = this.getCurrentDate.bind(this)\n  }\n\n  getCurrentDate () {\n    const d = new Date(Date.now())\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      hour: 'numeric',\n      minute: '2-digit'\n    }\n\n  return d.toLocaleDateString(undefined, options)\n  }\n\n  render () {\n    return <p className='detail'>{this.getCurrentDate()}</p>\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/detail.scss'\n\nconst size = {\n  width: 25,\n  height: 'auto',\n  marginBottom: '.5rem'\n}\n\nconst margin = {\n  marginTop: 0,\n  marginBottom: '.5rem'\n}\n\nexport class Wind extends React.Component {\n  render () {\n    const icon = 'wind'\n    const imgPath = `${process.env.PUBLIC_URL}/img/${icon}.svg`\n    return (\n      <div>\n        <img src={imgPath} alt='' style={size} />\n        <p className='detail' style={margin}>Wind Speed</p>\n        <p style={margin}>{this.props.windSpeed} m/s</p>\n      </div>\n    )\n  }\n}\n\nWind.propTypes = {\n  windSpeed: PropTypes.number.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/detail.scss'\n\nconst size = {\n  width: 25,\n  height: 'auto',\n  marginBottom: '.5rem'\n}\n\nconst margin = {\n  marginTop: 0,\n  marginBottom: '.5rem'\n}\n\nexport class Sun extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.formatTimeString = this.formatTimeString.bind(this)\n  }\n\n  formatTimeString (time) {\n    const d = new Date(time * 1000) // Time should be props supplied as unix timestamp so we need to multiply it by 1000 before we can use it\n    const hours = d.getHours()\n    const minutes = `0${d.getMinutes()}` // Let's prepend a 0 to display 2 digit minutes\n\n    return `${hours}:${minutes.substr(-2)}` // Add substr(-2) to remove leading 0 from anything over 10\n  }\n\n  render () {\n    const icon = this.props.desc === 'Sunrise' ? 'sunrise' : 'sunset'\n    const imgPath = `${process.env.PUBLIC_URL}/img/${icon}.svg`\n    return (\n      <div>\n        <img src={imgPath} alt='' style={size} />\n        <p className='detail' style={margin}>{this.props.desc}</p>\n        <p style={margin}>{this.formatTimeString(this.props.sun)}</p>\n      </div>\n    )\n  }\n}\n\nSun.propTypes = {\n  sun: PropTypes.number.isRequired,\n  desc: PropTypes.string\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport API from '../utils/API'\nimport OPENWEATHERAPIKEY from '../config'\nimport { City } from './City'\nimport { Weather } from './Weather'\nimport { Temp } from './Temp'\nimport { DateComponent } from './DateComponent'\nimport { Wind } from './Wind'\nimport { Sun } from './Sun'\n\nexport class WeatherContainer extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      city: undefined,\n      weather: undefined,\n      weatherIcon: undefined,\n      temp: undefined,\n    }\n\n    this.apiCall = this.apiCall.bind(this)\n    this.getLocation = this.getLocation.bind(this)\n\n  }\n\n  apiCall = async (call) => {\n    const CITY = this.props.searchTerm\n    const COUNTRY = 'uk'\n    const COORDS = call\n    const UNITS = 'metric'\n    \n    // Check if city or postcode has been searched for otherwise default to geolocation\n    // TODO: add postcode option\n    const APIgetString = () => {\n      if (CITY) {\n        return `?q=${CITY},${COUNTRY}&units=${UNITS}&APPID=${OPENWEATHERAPIKEY}`\n      } else {\n        return `?${COORDS}&units=${UNITS}&APPID=${OPENWEATHERAPIKEY}`\n      }\n    }\n\n    await API.get(APIgetString())\n      .then(response => response.data)\n      .then(\n        data => {\n          this.setState({\n            isLoaded: true,\n            error: null,\n            items: data,\n            city: data.name,\n            weather: data.weather[0].description,\n            weatherIcon: data.weather[0].icon,\n            temp: data.main.temp,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            windSpeed: data.wind.speed\n          })\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error: error.response.data.message\n          })\n        }\n      )\n  }\n\n  // Let's get the browser's geolocation\n  // https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition\n  getLocation () {\n    const options = {\n      maximumAge: 0,\n      timeout: 5000\n    }\n\n    const success = (pos) => {\n      const coord = pos.coords\n      const lat = coord.latitude\n      const lng = coord.longitude\n\n      // make apiCall as part of the success callback function\n      this.apiCall(`lat=${lat}&lon=${lng}`)\n    }\n\n    const error = (err) => {\n      console.warn(`ERROR(${err.code}): ${err.message}`)\n      this.setState ({\n        isLoaded: true,\n        error: err.message\n      })\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success, error, options)\n    } else {\n      this.setState({\n        error: 'Geolocation declined'\n      })\n    }\n  }\n\n  // Call api once component is mounted\n  componentDidMount () {\n    // Call getLocation here instead of apiCall as it will be part of the sucess callback\n    this.getLocation()\n  }\n\n  // Make api call again if new state doesn't match previous state \n  componentDidUpdate(prevProps) {\n    if (this.props.searchTerm !== prevProps.searchTerm) {\n      this.apiCall()\n    }\n  }\n\n  render () {\n    const { error, isLoaded, city, weather, weatherIcon, sunset, sunrise, windSpeed } = this.state\n    const temp = Math.round(this.state.temp) // Let's round the temperature to a whole number\n    \n    if (error) {\n      return <div>Error: {error}</div>\n    } else if (!isLoaded) {\n      return <div>Loading...</div>\n    } else {\n      return (\n        <div className='grid-row center'>\n          <div className='grid-cell spans-12'>\n            <City cityName={city} />\n            <DateComponent />\n          </div>\n          <Weather weather={weather} icon={weatherIcon} />\n          <div className='grid-cell spans-12'>\n            <Temp temp={temp} />\n          </div>\n          {/* TODO: add sunrise, wind and max-temp */}\n          <div className='grid-cell spans-4'>\n            <Sun sun={sunrise} desc={'Sunrise'} />\n          </div>\n          <div className='grid-cell spans-4'>\n            <Sun sun={sunset} desc={'Sunset'} />\n          </div>\n          <div className='grid-cell spans-4'>\n            <Wind windSpeed={windSpeed}/>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\n// eslint-disable-next-line react/no-typos\nWeatherContainer.propTypes = {\n  searchTerm: PropTypes.string.isRequired\n}","import React from 'react'\nimport { Form } from './components/Form'\nimport { WeatherContainer } from './components/WeatherContainer'\nimport './styles/grid.scss'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      search: ''\n    }\n\n    this.search = this.search.bind(this) // Bind search function\n  }\n\n  // Set search state to form's name='search' input\n  search = (e) => {\n    e.preventDefault() // Need to call this here to prevent the page reloading\n    this.setState({ search: e.target.elements.search.value })\n  }\n\n  render () {\n    return (\n      <div className='grid-container'>\n        <Form onSubmit={this.search} />\n        <WeatherContainer searchTerm={this.state.search} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}