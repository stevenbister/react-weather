{"version":3,"sources":["components/Form.js","utils/API.js","config.js","components/City.js","components/Weather.js","components/Temp.js","utils/CurrentDate.js","components/Date.js","components/WeatherContainer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","value","handleChange","bind","e","this","setState","target","className","onSubmit","for","id","type","name","onChange","React","Component","axios","create","baseURL","OPENWEATHERAPIKEY","City","cityName","size","width","height","Weather","icon","imgPath","process","src","alt","style","weather","Temp","temp","getCurrentDate","Date","now","toLocaleDateString","day","month","hour","minute","timeZoneName","WeatherContainer","apiCall","a","CITY","searchTerm","API","get","then","response","data","isLoaded","error","items","city","description","weatherIcon","main","undefined","prevProps","Math","round","message","App","search","preventDefault","elements","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d4c05b0.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/grid.scss'\nimport '../styles/form.scss'\n\nexport class Form extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      value: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange (e) {\n    this.setState({ value: e.target.value }) // Set property to value of input\n  }\n\n  render () {\n    return (\n      // onChange function is written in parent and set a prop here\n      <div className='grid-row'>\n        <form className='grid-cell search-form' onSubmit={this.props.onSubmit}>\n          <label for='search'>Search city:</label>\n          <input id='search' type='text' name='search' onChange={this.handleChange} value={this.state.value} />\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n    )\n  }\n}\n\n// eslint-disable-next-line react/no-typos\nForm.propTypes = {\n  search: PropTypes.string\n}\n","import axios from 'axios'\n\nexport default axios.create({\n  baseURL: `https://api.openweathermap.org/data/2.5/weather`\n})","const OPENWEATHERAPIKEY = 'dd6866086c793ca95487b4ee51f83cf5'\n\nexport default OPENWEATHERAPIKEY\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/city.scss'\n\nexport class City extends React.Component {\n  render () {\n    return <h1 className='city'>{this.props.cityName}</h1>\n  }\n}\n\nCity.propTypes = {\n  cityName: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/weather.scss'\nimport '../styles/detail.scss'\n\nconst size = {\n  width: 75,\n  height: 'auto'\n}\n\nexport class Weather extends React.Component {\n  render () {\n    const icon = this.props.icon\n    // As we need to dynamically reference icon we place it into the public folder\n    //  https://create-react-app.dev/docs/using-the-public-folder\n    const imgPath = `${process.env.PUBLIC_URL}/img/${icon}.svg`\n    return (\n      <div className='grid-cell spans-12 weather-block'>\n        <img src={imgPath} alt='' style={size} />\n        <p className='detail'>{this.props.weather}</p>\n      </div>\n    )\n  }\n}\n\nWeather.propTypes = {\n  weather: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../styles/temp.scss'\n\nexport class Temp extends React.Component {\n  render () {\n    return <p className='temp'>{this.props.temp}&deg;C</p>\n  }\n}\n\nTemp.propTypes = {\n  temp: PropTypes.number.isRequired\n}","function getCurrentDate () {\n  const d = new Date(Date.now())\n  const options = {\n    day: 'numeric',\n    month: 'long',\n    hour: '2-digit',\n    minute: '2-digit',\n    timeZoneName: 'short'\n  }\n\n  return d.toLocaleDateString('en', options) // Return date as string might change this to own\n}\n\nexport default getCurrentDate\n","import React from 'react'\r\nimport getCurrentDate from '../utils/CurrentDate'\r\nimport '../styles/detail.scss'\r\n\r\nexport class Date extends React.Component {\r\n  render () {\r\n    return <p className='detail'>{getCurrentDate()}</p>\r\n  }\r\n}\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport API from '../utils/API'\nimport OPENWEATHERAPIKEY from '../config'\nimport { City } from './City'\nimport { Weather } from './Weather'\nimport { Temp } from './Temp'\nimport { Date } from './Date'\n\nexport class WeatherContainer extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      city: undefined,\n      weather: undefined,\n      weatherIcon: undefined,\n      temp: undefined,\n    }\n  }\n\n  apiCall = async () => {\n    const CITY = this.props.searchTerm\n    // const CITY = 'Birmingham'\n    const COUNTRY = 'uk'\n    const UNITS = 'metric'\n    await API.get(`?q=${CITY},${COUNTRY}&units=${UNITS}&APPID=${OPENWEATHERAPIKEY}`)\n      .then(response => response.data)\n      .then(\n        data => {\n          this.setState({\n            isLoaded: true,\n            error: null,\n            items: data,\n            city: data.name,\n            weather: data.weather[0].description,\n            weatherIcon: data.weather[0].icon,\n            temp: data.main.temp\n          })\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          })\n        }\n      )\n  }\n\n  // Call api once component is mounted\n  componentDidMount () {\n    this.apiCall()\n  }\n\n  // Make api call again if new state doesn't match previous state \n  componentDidUpdate(prevProps) {\n    if (this.props.searchTerm !== prevProps.searchTerm) {\n      this.apiCall()\n    }\n  }\n\n  render () {\n    const { error, isLoaded, city, weather, weatherIcon } = this.state\n    const temp = Math.round(this.state.temp) // Let's round the temperature to a whole number\n    \n    if (error) {\n      return <div>Error: {error.response.data.message}</div>\n    } else if (!isLoaded) {\n      return <div>Loading...</div>\n    } else {\n      // TODO: Seperate these into components\n      return (\n        <div className='grid-row center'>\n          <div className='grid-cell spans-12'>\n            <City cityName={city} />\n            <Date />\n          </div>\n          <Weather weather={weather} icon={weatherIcon} />\n          <div className='grid-cell spans-12'>\n            <Temp temp={temp} />\n          </div>\n          {/* TODO: add sunrise, wind and max-temp */}\n        </div>\n      )\n    }\n  }\n}\n\n// eslint-disable-next-line react/no-typos\nWeatherContainer.propTypes = {\n  searchTerm: PropTypes.string.isRequired\n}","import React from 'react'\nimport { Form } from './components/Form'\nimport { WeatherContainer } from './components/WeatherContainer'\nimport './styles/grid.scss'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      search: 'Birmingham'\n    }\n\n    this.search = this.search.bind(this) // Bind search function\n  }\n\n  // Set search state to form's name='search' input\n  search = (e) => {\n    e.preventDefault() // Need to call this here to prevent the page reloading\n    this.setState({ search: e.target.elements.search.value })\n  }\n\n  render () {\n    return (\n      <div className='grid-container'>\n        <Form onSubmit={this.search} />\n        <WeatherContainer searchTerm={this.state.search} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}